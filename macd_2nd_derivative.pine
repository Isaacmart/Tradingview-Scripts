//@version=4
study(title="MACD 2nd derivative", overlay = true, resolution="")
// Getting inputs
fast_length = input(title="Fast Length", type=input.integer, defval=12)
slow_length = input(title="Slow Length", type=input.integer, defval=26)
src = input(title="Source", type=input.source, defval=close)
signal_length = input(title="Signal Smoothing", type=input.integer, minval = 1, maxval = 50, defval = 9)
sma_source = input(title="Simple MA(Oscillator)", type=input.bool, defval=false)
sma_signal = input(title="Simple MA(Signal Line)", type=input.bool, defval=false)

// Calculating
fast_ma = sma_source ? sma(src, fast_length) : ema(src, fast_length)
slow_ma = sma_source ? sma(src, slow_length) : ema(src, slow_length)
macd = fast_ma - slow_ma
signal = sma_signal ? sma(macd, signal_length) : ema(macd, signal_length)
hist = macd - signal

fast_change = (fast_ma - fast_ma[1])
slow_change = (slow_ma - slow_ma[1])
Time = input(5, minval=1)

fastVelocity = fast_change/Time 
fastDeltaVelocity = fastVelocity - fastVelocity[1]
fastAcceleration = fastDeltaVelocity/Time

slowVelocity = slow_change/Time
slowDeltaVelocity = slowVelocity - slowVelocity[1]
slowAcceleration = slowDeltaVelocity/Time 

plot(fastAcceleration * 5, style=plot.style_columns, color=color.blue)
plot(slowAcceleration * 5, style=plot.style_columns, color=color.blue)
plot(fast_change/Time, color=color.red)
plot(slow_change/Time, color=color.orange)
